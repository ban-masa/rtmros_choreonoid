;;HowToUse
;;in roseus
;;(init)
;;(all-motion)

(defun init ()
  (load "package://hrpsys_ros_bridge_tutorials/euslisp/jaxon_red-interface.l")
  (jaxon_red-init)
  (setq *robot* *jaxon_red*)
  (send *robot* :fix-leg-to-coords (make-coords))
  (objects (list *robot*))
  )

(defun before-grasp-pole-pose ()
  (send *robot* :reset-manip-pose)
  (send *robot* :move-centroid-on-foot :both '(:rleg :lleg))
  (send *robot* :fix-leg-to-coords (make-coords))
  (let* ((rhtc (make-coords :pos (float-vector 0 -400 800) :rpy (float-vector 0 (deg2rad 90) 0)))
         (lhtc (make-coords :pos (float-vector 0 400 800) :rpy (float-vector 0 (deg2rad 90) 0)))
         (rftc (send *robot* :rleg :end-coords :copy-worldcoords))
         (lftc (send *robot* :lleg :end-coords :copy-worldcoords))
         )
    (send *robot* :fullbody-inverse-kinematics
          (list rftc lftc rhtc lhtc)
          :move-target (mapcar #'(lambda (l) (send *robot* l :end-coords)) (list :rleg :lleg :rarm :larm))
          :link-list (mapcar #'(lambda (x) (send *robot* :link-list (send *robot* x :end-coords :parent))) '(:rleg :lleg :rarm :larm))
          :translation-axis (list t t t t)
          )
    )
  )

(defun grasp-pole-pose ()
  (send *robot* :arms :move-end-pos (float-vector 0 0 -100) :world)
  (send *robot* :legs :move-end-pos (float-vector 0 0 100) :world)
  )

(defun leg-lift-pose ()
  (send *robot* :rleg :angle-vector (float-vector 0 0 -90 0 0 0))
  (send *robot* :lleg :angle-vector (float-vector 0 0 -90 0 0 0))
  (let* ((cposx-diff (- (elt (send *robot* :centroid) 0) (elt (send *robot* :rarm :end-coords :worldpos) 0)))
         )
    (while (> cposx-diff 1)
      (send *robot* :arms :move-end-pos (float-vector cposx-diff 0 0) :world)
      (setq cposx-diff (- (elt (send *robot* :centroid) 0) (elt (send *robot* :rarm :end-coords :worldpos) 0)))
      )
    )
  )

(defun all-motion ()
  (before-grasp-pole-pose)
  (send *ri* :angle-vector (send *robot* :angle-vector))
  (send *ri* :wait-interpolation)
  (send *ri* :stop-impedance :arms)
  (send *ri* :stop-st)
  (grasp-pole-pose)
  (send *ri* :angle-vector (send *robot* :angle-vector))
  (send *ri* :wait-interpolation)
  (send *ri* :stop-auto-balancer)
  (leg-lift-pose)
  (send *ri* :angle-vector (send *robot* :angle-vector))
  (send *ri* :wait-interpolation)
  )
